// Reference https://www.jetbrains.org/intellij/sdk/docs/tutorials/build_system/gradle_guide.html
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven { url 'https://www.myget.org/F/rd-snapshots/maven/' }
        mavenCentral()
    }

    dependencies {
        classpath("com.jetbrains.rd:rd-gen:0.1831.17") // https://www.myget.org/feed/rd-snapshots/package/maven/com.jetbrains.rd/rd-gen
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.31'
    id 'org.jetbrains.intellij' version '0.7.2' // https://github.com/JetBrains/gradle-intellij-plugin/releases
}

ext {
    isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
    rdLibDirectory = {
        new File(intellij.ideaDependency.classes, "lib/rd")
    }
    resharperHostLibDirectory = {
        new File(intellij.ideaDependency.classes, "lib/ReSharperHost")
    }
    aiKey = System.getenv('APPINSIGHTSINSTRUMENTATIONKEY')
}

repositories {
    maven { url 'https://cache-redirector.jetbrains.com/intellij-repository/snapshots' }
    maven { url 'https://cache-redirector.jetbrains.com/maven-central' }
}

wrapper {
    gradleVersion = '6.8.3'
    distributionType = Wrapper.DistributionType.ALL
    distributionUrl = "https://cache-redirector.jetbrains.com/services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

version = ext.PluginVersion

if (ext.has("username")) intellij.publish.username = ext.username
if (ext.has("password")) intellij.publish.password = ext.password

sourceSets {
    main {
        java.srcDir 'src/rider/main/kotlin'
        resources.srcDir 'src/rider/main/resources'
    }
}

compileKotlin {
    kotlinOptions { jvmTarget = "1.8" }
}

task prepareCompileDotNet {
    def generatedPropsFile = file("${rootDir}/src/dotnet/SdkProperties.generated.props")
    outputs.files generatedPropsFile
    doLast {
        generatedPropsFile.text = """<?xml version="1.0" encoding="utf-8"?>
<Project>
    <PropertyGroup>
        <ReSharperHostPath>${resharperHostLibDirectory()}</ReSharperHostPath>
    </PropertyGroup>
</Project>
"""
    }
}

task compileDotNet {
    dependsOn prepareCompileDotNet

    doLast {
        def arguments = ["msbuild","/t:Restore;Rebuild","${DotnetSolution}","/p:Configuration=${BuildConfiguration}","/p:HostFullIdentifier=","/p:AssemblyVersion=${version}"]
        if (aiKey) arguments << "/p:AppInsightsInstrumentationKey=${aiKey}";
        exec {            
            executable "dotnet"
            args arguments
            workingDir rootDir
        }
    }
}

buildPlugin {
    doLast {
        copy {
            from "${buildDir}/distributions/${rootProject.name}-${version}.zip"
            into "${rootDir}/output"
        }
    }
}

intellij {
    type = 'RD'
    version = "${ProductVersion}"
    downloadSources = false
    instrumentCode = false
    // TODO: add plugins
    // plugins("uml", "com.jetbrains.ChooseRuntime:1.0.9")
}

runIde {
    // TODO: adapt runtime if necessary
    // jbrVersion("jbr_jcef-11_0_6b765.40") // https://confluence.jetbrains.com/display/JBR/Release+notes
}

apply plugin: 'com.jetbrains.rdgen'

rdgen {
    def modelDir = new File(rootDir, "protocol/src/main/kotlin/model")
    def csOutput = new File(rootDir, "src/dotnet/${DotnetPluginId}/Rider")
    def ktOutput = new File(rootDir, "src/rider/main/kotlin/com/jetbrains/rider/plugins/${RiderPluginId.replace('.','/').toLowerCase()}")

    verbose = true
    classpath {
        "${rdLibDirectory()}/rider-model.jar"
    }
    sources "${modelDir}/rider"
    hashFolder = "${buildDir}"
    packages = "model.rider"

    generator {
        language = "kotlin"
        transform = "asis"
        root = "com.jetbrains.rider.model.nova.ide.IdeRoot"
        namespace = "com.jetbrains.rider.model"
        directory = "$ktOutput"
    }

    generator {
        language = "csharp"
        transform = "reversed"
        root = "com.jetbrains.rider.model.nova.ide.IdeRoot"
        namespace = "JetBrains.Rider.Model"
        directory = "$csOutput"
    }
}

patchPluginXml {
    def changelogText = file("${rootDir}/CHANGELOG.md").text
    def changelogMatches = changelogText =~ /(?s)(-.+?)(?=##|$)/

    changeNotes = changelogMatches.collect {
        it[1].replaceAll(/(?s)\r?\n/, "<br />\n")
    }.take(1).join('')
}

prepareSandbox {
    dependsOn compileDotNet

    def outputFolder = "${rootDir}/src/dotnet/${DotnetPluginId}/bin/${DotnetPluginId}.Rider/${BuildConfiguration}"
    def dllFiles = [
            "$outputFolder/${DotnetPluginId}.dll",
            "$outputFolder/${DotnetPluginId}.pdb",
            "$outputFolder/Regex.dll",
            "$outputFolder/Regex.pdb",
            // TODO: add additional assemblies
    ]

    dllFiles.forEach({ f ->
        def file = file(f)
        from(file, { into "${intellij.pluginName}/dotnet" })
    })

    doLast {
        dllFiles.forEach({ f ->
            def file = file(f)
            if (!file.exists()) throw new RuntimeException("File ${file} does not exist")
        })
    }
}

publishPlugin {
    dependsOn buildPlugin
    if (hasProperty('intellijPublishToken')) {
        token intellijPublishToken
    }

    channels(!version.contains("-") ? 'Stable' : 'EAP')
}
